import os
import telebot
from telebot import types
import time
import threading
from flask import Flask
import logging
import requests

# ================== –û–ë–ú–ê–ù–ö–ê –î–õ–Ø RENDER ==================
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Telegram Bot is running!"

@app.route('/health')
def health():
    return "OK"

def run_flask():
    app.run(host='0.0.0.0', port=5000, debug=False)

flask_thread = threading.Thread(target=run_flask)
flask_thread.daemon = True
flask_thread.start()
# =======================================================

# ================== –ê–í–¢–û-–ü–ò–ù–ì –î–õ–Ø RENDER ==================
def keep_alive():
    """–ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã Render –Ω–µ —É—Å–Ω—É–ª"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            render_url = os.environ.get('RENDER_URL')
            if not render_url:
                # –ï—Å–ª–∏ URL –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                service_name = os.environ.get('RENDER_SERVICE_NAME')
                if service_name:
                    render_url = f"https://{service_name}.onrender.com"
            
            if render_url:
                response = requests.get(f"{render_url}/health", timeout=10)
                logging.info(f"‚úÖ –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status_code}")
            else:
                logging.info("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω (–ø–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω - URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ü–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        
        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏–Ω–∞
        time.sleep(600)

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–ø–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
ping_thread = threading.Thread(target=keep_alive)
ping_thread.daemon = True
ping_thread.start()
# =======================================================

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

logger.info("‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
agents = [
    {"name": "–ê–ª–∞–Ω", "phone": "+7 (996) 882-57-34", "status": "—Å–≤–æ–±–æ–¥–µ–Ω"},
    {"name": "–†—É—Å—Ç–∞–º", "phone": "+7 (995) 943-14-07", "status": "—Å–≤–æ–±–æ–¥–µ–Ω"},
    {"name": "–î–µ–Ω–∏—Å", "phone": "+7 (963) 891-55-55", "status": "—Å–≤–æ–±–æ–¥–µ–Ω"}
]

current_agent_index = 0

@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        button_agent = types.KeyboardButton("üìû –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞")
        markup.add(button_agent)
        
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞¬ª, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.
        """
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

@bot.message_handler(func=lambda message: message.text == "üìû –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞")
def send_agent_number(message):
    global current_agent_index
    try:
        agent = agents[current_agent_index]
        
        agent_info = f"""
‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç:

üë®‚Äçüíº –ò–º—è: {agent['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {agent['phone']}
üü¢ –°—Ç–∞—Ç—É—Å: {agent['status']}

üí° –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
        """
        
        bot.send_message(message.chat.id, agent_info)
        logger.info(f"‚úÖ –í—ã–¥–∞–Ω –∞–≥–µ–Ω—Ç {agent['name']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}")
        
        current_agent_index = (current_agent_index + 1) % len(agents)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                types.KeyboardButton("üìû –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞")
            )
        )

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    try:
        if message.text and message.text != "üìû –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞":
            bot.send_message(
                message.chat.id, 
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton("üìû –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞")
                )
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_other_messages: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("=" * 50)
    logger.info("üöÄ –ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø –ù–ê RENDER")
    logger.info("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    logger.info("‚úÖ –ê–≤—Ç–æ-–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    logger.info("=" * 50)
    
    while True:
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            bot.infinity_polling(timeout=90, long_polling_timeout=90)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            logger.info("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)


